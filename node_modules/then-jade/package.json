{
  "name": "then-jade",
  "version": "2.0.0",
  "description": "Jade with async/streaming support via promises and generators",
  "keywords": [],
  "dependencies": {
    "regenerator": "~0.4.0",
    "then-yield": "0.0.1",
    "barrage": "~1.0.0",
    "promise": "~4.0.0",
    "with": "~3.0.0",
    "jade": "1.3.0"
  },
  "devDependencies": {
    "mocha": "*",
    "should": "~3.1.2",
    "uglify-js": "~2.4.12",
    "mocha-as-promised": "~2.0.0",
    "coffee-script": "~1.7.1",
    "less": "~1.6.3",
    "marked": "~0.3.1",
    "stylus": "~0.42.2",
    "gnode": "0.0.6",
    "gethub": "~1.0.2"
  },
  "scripts": {
    "test": "node test/download-jade-tests && mocha -R spec"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/then/then-jade.git"
  },
  "author": {
    "name": "ForbesLindesay"
  },
  "license": "MIT",
  "readme": "<a href=\"http://promises-aplus.github.com/promises-spec\"><img src=\"http://promises-aplus.github.com/promises-spec/assets/logo-small.png\" align=\"right\" /></a>\r\n# then-jade\r\n\r\nJade template engine with async/streaming support via promises and generators.\r\n\r\nThe Jade template engine is a templating engine with a 2 stage process :\r\n * stage 1: synchronous compilation of a template, leading to a rendering function\r\n * stage 2: synchronous rendering of compiled template using user defined `locals`\r\n\r\n`then-jade` makes sure that the rendering stage of the process (stage 2) becomes asynchronous: \r\n * Generators and Promises can be used in the user defined `locals` and the rendering will be progressive, waiting asynchronously for the resolution of the promises\r\n * The rendered output is made available as a ReadableStream with back-pressure implemented, so the rendering will only be done as fast as the downstream WritableStream can handle it\r\n\r\n\r\n[![Build Status](https://travis-ci.org/then/then-jade.png?branch=master)](https://travis-ci.org/then/then-jade)\r\n[![Dependency Status](https://gemnasium.com/then/then-jade.png)](https://gemnasium.com/then/then-jade)\r\n[![NPM version](https://badge.fury.io/js/then-jade.png)](http://badge.fury.io/js/then-jade)\r\n\r\n## Installation\r\n\r\n    npm install then-jade\r\n\r\n## API\r\n\r\nBefore all examples, you will need:\r\n\r\n```js\r\nvar thenJade = require('then-jade');\r\n```\r\n\r\n### compile(str, options)\r\n\r\nCompiles a string containing a jade template into a rendering function.\r\n\r\n```js\r\nvar fn = thenJade.compile(str, options);\r\n```\r\n\r\nThe rendering function can be called as `fn(locals, callback)` where `locals` are the user defined variables or generator/promises that can be used in the template. `callback` is a node-style `callback(err, res)` that will be called with the rendered template once the rendering is finished or with an error if something went wrong.\r\n\r\nFor `options`, see the documentation for `compileStreaming`\r\n\r\n\r\n### compileStreaming(str, options)\r\n\r\nCompiles a string containing a jade template into a rendering function.\r\n\r\n```js\r\nvar fn = thenJade.compileStreaming(str, options);\r\n```\r\n\r\nThe rendering function can be called as `fn(locals)` where `locals` are the user defined variables or generator/promises that can be used in the template. The result of calling this function is a ReadableStream that will stream the rendered template.\r\n\r\n### render(str, options, callback)\r\n\r\n* Render the given `str` of jade.\r\n\r\nIf the function is called with an optional node-style `callback`, the callback\r\nwill be called with the result when the rendering is finished.\r\n\r\nOtherwise, the function will return a Promise that will be fulfilled when\r\nthe rendering is finished.\r\n\r\nOptions:\r\n  - `filename` filename required for `include` / `extends`\r\n\r\n### renderStreaming(str, options)\r\n\r\nRender the given `str` of jade\r\n\r\n`options`:\r\n  - `filename` filename required for `include` / `extends`\r\n\r\n`options` are used as `locals` at rendering time.\r\n\r\nThe result is a ReadableStream wrapping the asynchronous rendering of the template.\r\nThis stream can be piped into a WritableStream.\r\n\r\n### renderFile(path, options, callback)\r\n\r\nRender the given `path` file containing a jade.\r\nThe compilation of the file is synchronous and uses an internal in-memory cache\r\nto avoid re-compiling the same file twice.\r\nThe rendering is asynchronous.\r\n\r\nIf the function is called with an optional node-style `callback`, the callback\r\nwill be called with the result when the rendering is finished.\r\n\r\nOtherwise, the function will return a Promise that will be fulfilled when\r\nthe rendering is finished.\r\n\r\n`options` are used as `locals` at rendering time.\r\n\r\n### renderFileStreaming(path, options) \r\n\r\nRender the given `path` file containing a jade.\r\nThe compilation of the file is synchronous and uses an internal in-memory cache\r\nto avoid re-compiling the same file twice.\r\nThe rendering is asynchronous.\r\n\r\nThe result is a ReadableStream wrapping the asynchronous rendering of the template.\r\nThis stream can be piped into a WritableStream.\r\n\r\n`options` are used as `locals` at rendering time.\r\n\r\n## License\r\n\r\n  MIT\r\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/then/then-jade/issues"
  },
  "homepage": "https://github.com/then/then-jade",
  "_id": "then-jade@2.0.0",
  "_shasum": "e9537508319c5c66b23edd59248262457b7602fe",
  "_from": "then-jade@",
  "_resolved": "https://registry.npmjs.org/then-jade/-/then-jade-2.0.0.tgz"
}
